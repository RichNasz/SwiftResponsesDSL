//
//  Messages.swift
//  SwiftResponsesDSL
//
//  Message types and content parts for the SwiftResponsesDSL
//
//  Generated by AI-assisted code generation.
//  Created by Richard Naszcyniec on [Date].
//  Copyright Â© [Year] Richard Naszcyniec. All rights reserved.
//

import Foundation

// MARK: - Content Parts

/// Represents multimodal content (text, image URLs, files)
public enum ContentPart: Codable, Sendable {
    case text(String)
    case imageUrl(url: String, detail: Detail? = nil)
    case inputFile(fileId: String)
    case inputFileData(dataUrl: String)

    public enum Detail: String, Codable, Sendable {
        case auto
        case low
        case high
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        switch self {
        case .text(let content):
            try container.encode("text", forKey: .type)
            try container.encode(content, forKey: .text)
        case .imageUrl(let url, let detail):
            try container.encode("image_url", forKey: .type)
            var imageUrlContainer = container.nestedContainer(keyedBy: ImageUrlKeys.self, forKey: .imageUrl)
            try imageUrlContainer.encode(url, forKey: .url)
            if let detail = detail {
                try imageUrlContainer.encode(detail, forKey: .detail)
            }
        case .inputFile(let fileId):
            try container.encode("input_file", forKey: .type)
            try container.encode(fileId, forKey: .fileId)
        case .inputFileData(let dataUrl):
            try container.encode("input_file_data", forKey: .type)
            try container.encode(dataUrl, forKey: .fileData)
        }
    }

    public init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: CodingKeys.self)
        let type = try container.decode(String.self, forKey: .type)

        switch type {
        case "text":
            let text = try container.decode(String.self, forKey: .text)
            self = .text(text)
        case "image_url":
            let imageUrlContainer = try container.nestedContainer(keyedBy: ImageUrlKeys.self, forKey: .imageUrl)
            let url = try imageUrlContainer.decode(String.self, forKey: .url)
            let detail = try imageUrlContainer.decodeIfPresent(Detail.self, forKey: .detail)
            self = .imageUrl(url: url, detail: detail)
        case "input_file":
            let fileId = try container.decode(String.self, forKey: .fileId)
            self = .inputFile(fileId: fileId)
        case "input_file_data":
            let dataUrl = try container.decode(String.self, forKey: .fileData)
            self = .inputFileData(dataUrl: dataUrl)
        default:
            throw DecodingError.dataCorruptedError(forKey: .type, in: container, debugDescription: "Unknown content part type: \(type)")
        }
    }

    private enum CodingKeys: String, CodingKey {
        case type, text, imageUrl = "image_url", fileId, fileData
    }

    private enum ImageUrlKeys: String, CodingKey {
        case url, detail
    }
}

/// Represents annotations in response text (citations, etc.)
public enum Annotation: Decodable, Sendable {
    case urlCitation(startIndex: Int, endIndex: Int, url: String, title: String)
    case fileCitation(index: Int, fileId: String, filename: String)
    case unknown(type: String, data: [String: AnyCodable])

    public init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: CodingKeys.self)
        let type = try container.decode(String.self, forKey: .type)

        switch type {
        case "url_citation":
            let startIndex = try container.decode(Int.self, forKey: .startIndex)
            let endIndex = try container.decode(Int.self, forKey: .endIndex)
            let url = try container.decode(String.self, forKey: .url)
            let title = try container.decode(String.self, forKey: .title)
            self = .urlCitation(startIndex: startIndex, endIndex: endIndex, url: url, title: title)
        case "file_citation":
            let index = try container.decode(Int.self, forKey: .index)
            let fileId = try container.decode(String.self, forKey: .fileId)
            let filename = try container.decode(String.self, forKey: .filename)
            self = .fileCitation(index: index, fileId: fileId, filename: filename)
        default:
            let data = try container.decode([String: AnyCodable].self, forKey: .data)
            self = .unknown(type: type, data: data)
        }
    }

    private enum CodingKeys: String, CodingKey {
        case type, startIndex = "start_index", endIndex = "end_index", url, title, index, fileId = "file_id", filename, data
    }
}

// MARK: - Message Types

/// Represents system prompts
public struct SystemMessage: ResponseMessage {
    public let role: Role = .system
    public let content: [ContentPart]

    public init(text: String) {
        self.content = [.text(text)]
    }

    public init(content: [ContentPart]) {
        self.content = content
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(role, forKey: .role)
        try container.encode(content, forKey: .content)
    }

    private enum CodingKeys: String, CodingKey {
        case role, content
    }
}

/// Represents user or tool messages with multimodal content
public struct UserMessage: ResponseMessage {
    public let role: Role
    public let content: [ContentPart]

    public init(role: Role = .user, content: [ContentPart]) {
        self.role = role
        self.content = content
    }

    public init(role: Role = .user, text: String) {
        self.role = role
        self.content = [.text(text)]
    }

    public init(role: Role = .user, fileId: String) {
        self.role = role
        self.content = [.inputFile(fileId: fileId)]
    }

    public init(role: Role = .user, base64File: String, mimeType: String = "application/pdf") {
        self.role = role
        self.content = [.inputFileData(dataUrl: "data:\(mimeType);base64,\(base64File)")]
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(role, forKey: .role)
        try container.encode(content, forKey: .content)
    }

    private enum CodingKeys: String, CodingKey {
        case role, content
    }
}

/// Represents assistant responses in conversation history
public struct AssistantMessage: ResponseMessage, Decodable {
    public let role: Role = .assistant
    public let content: [ContentPart]

    public init(text: String) {
        self.content = [.text(text)]
    }

    public init(content: [ContentPart]) {
        self.content = content
    }

    public init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: CodingKeys.self)
        let decodedRole = try container.decode(Role.self, forKey: .role)
        guard decodedRole == .assistant else {
            throw DecodingError.dataCorruptedError(forKey: .role, in: container, debugDescription: "Expected assistant role")
        }
        self.content = try container.decode([ContentPart].self, forKey: .content)
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(role, forKey: .role)
        try container.encode(content, forKey: .content)
    }

    private enum CodingKeys: String, CodingKey {
        case role, content
    }
}
