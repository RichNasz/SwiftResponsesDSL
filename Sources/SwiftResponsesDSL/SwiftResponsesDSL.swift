//
//  SwiftResponsesDSL.swift
//  SwiftResponsesDSL
//
//  Main entry point for the SwiftResponsesDSL package
//  Provides unified access to all DSL components
//
//  Generated by AI-assisted code generation.
//  Created by Richard Naszcyniec on [Date].
//  Copyright © [Year] Richard Naszcyniec. All rights reserved.
//
//  === MODULARIZED ARCHITECTURE ===
//  This file serves as the main entry point for the SwiftResponsesDSL package.
//  The implementation has been modularized into separate files for better
//  maintainability and readability:
//
//  - Core.swift: Basic enums, protocols, and AnyCodable
//  - Messages.swift: Message types and content parts
//  - Configuration.swift: Configuration parameter structs
//  - API.swift: Request/response types and tools
//  - Client.swift: LLMClient actor and networking
//  - Builders.swift: Result builders for declarative syntax
//  - Convenience.swift: Helper functions
//
//  This approach provides:
//  ✅ Better code organization and navigation
//  ✅ Easier maintenance and debugging
//  ✅ Clear separation of concerns
//  ✅ Improved developer experience
//

import Foundation

// MARK: - Package Overview

/// SwiftResponsesDSL is an embedded Swift Domain-Specific Language (DSL) designed
/// to simplify communication with Large Language Model (LLM) inference servers
/// that support OpenAI-compatible Responses endpoints.
///
/// Key Features:
/// - Type-safe API interactions
/// - Declarative syntax with result builders
/// - Multimodal content support (text, images, files)
/// - Tool integration (functions, file search, web search)
/// - Conversation management
/// - Both synchronous and streaming responses
/// - Comprehensive error handling
///
/// Example Usage:
/// ```swift
/// let client = try LLMClient(baseURLString: "https://api.openai.com/v1/responses")
///
/// // Simple chat
/// let response = try await client.chat(model: "gpt-4", message: "Hello!")
///
/// // Advanced usage with configuration
/// let request = try ResponseRequest(
///     model: "gpt-4",
///     config: {
///         Temperature(0.7)
///         MaxOutputTokens(100)
///         TopP(0.9)
///     },
///     input: {
///         system("You are a helpful assistant")
///         user("Explain quantum computing")
///     }
/// )
/// ```
///
/// The DSL supports both imperative and declarative programming styles,
/// making it suitable for simple interactions and complex workflows alike.

// MARK: - Module Information

/// This file serves as the main entry point for the SwiftResponsesDSL package.
/// The implementation has been modularized into separate files for better
/// maintainability and readability:
///
/// - Core.swift: Basic enums, protocols, and AnyCodable
/// - Messages.swift: Message types and content parts
/// - Configuration.swift: Configuration parameter structs
/// - API.swift: Request/response types and tools
/// - Client.swift: LLMClient actor and networking
/// - Builders.swift: Result builders for declarative syntax
/// - Convenience.swift: Helper functions
///
/// All types and functions are automatically available through this main module.
