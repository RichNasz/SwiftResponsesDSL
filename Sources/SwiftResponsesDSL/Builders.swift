//
//  Builders.swift
//  SwiftResponsesDSL
//
//  Result builders for declarative syntax
//
//  Generated by AI-assisted code generation.
//  Created by Richard Naszcyniec on [Date].
//  Copyright Â© [Year] Richard Naszcyniec. All rights reserved.
//

import Foundation

// MARK: - Result Builders

/// Result builder for creating message arrays
@resultBuilder
public struct ResponseBuilder {
    public static func buildBlock(_ components: (any ResponseMessage)...) -> [any ResponseMessage] {
        Array(components)
    }

    public static func buildOptional(_ component: [any ResponseMessage]?) -> [any ResponseMessage] {
        component ?? []
    }

    public static func buildEither(first component: [any ResponseMessage]) -> [any ResponseMessage] {
        component
    }

    public static func buildEither(second component: [any ResponseMessage]) -> [any ResponseMessage] {
        component
    }

    public static func buildArray(_ components: [[any ResponseMessage]]) -> [any ResponseMessage] {
        components.flatMap { $0 }
    }

    public static func buildExpression(_ expression: any ResponseMessage) -> [any ResponseMessage] {
        [expression]
    }

    public static func buildExpression(_ expression: [any ResponseMessage]) -> [any ResponseMessage] {
        expression
    }

    public static func buildExpression(_ expression: String) -> [any ResponseMessage] {
        [UserMessage(text: expression)]
    }

    public static func buildLimitedAvailability(_ component: [any ResponseMessage]) -> [any ResponseMessage] {
        component
    }

    public static func buildFinalResult(_ component: [any ResponseMessage]) -> [any ResponseMessage] {
        component
    }
}

/// Result builder for creating configuration parameter arrays
@resultBuilder
public struct ResponseConfigBuilder {
    public static func buildBlock(_ components: (any ResponseConfigParameter)...) -> [any ResponseConfigParameter] {
        Array(components)
    }

    public static func buildOptional(_ component: [any ResponseConfigParameter]?) -> [any ResponseConfigParameter] {
        component ?? []
    }

    public static func buildEither(first component: [any ResponseConfigParameter]) -> [any ResponseConfigParameter] {
        component
    }

    public static func buildEither(second component: [any ResponseConfigParameter]) -> [any ResponseConfigParameter] {
        component
    }

    public static func buildArray(_ components: [[any ResponseConfigParameter]]) -> [any ResponseConfigParameter] {
        components.flatMap { $0 }
    }

    public static func buildExpression(_ expression: any ResponseConfigParameter) -> [any ResponseConfigParameter] {
        [expression]
    }

    public static func buildLimitedAvailability(_ component: [any ResponseConfigParameter]) -> [any ResponseConfigParameter] {
        component
    }

    public static func buildFinalResult(_ component: [any ResponseConfigParameter]) -> [any ResponseConfigParameter] {
        component
    }
}
