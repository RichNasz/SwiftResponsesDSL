//
//  Core.swift
//  SwiftResponsesDSL
//
//  Core types and protocols for the SwiftResponsesDSL
//
//  This file contains the fundamental building blocks of SwiftResponsesDSL,
//  including role definitions, error handling, and type-erased encoding support.
//
//  Generated by AI-assisted code generation.
//  Created by Richard Naszcyniec on [Date].
//  Copyright Â© [Year] Richard Naszcyniec. All rights reserved.
//

import Foundation

// MARK: - Core Enums

/// Defines the role of a message participant in a conversation.
///
/// This enum represents the different types of participants that can send
/// messages in a conversation with a Large Language Model.
///
/// - Note: These roles align with OpenAI's message role specifications
///         and are used to provide context about who is speaking in the conversation.
///
/// - SeeAlso: ``ResponseMessage``, ``LLMClient``
public enum Role: String, Codable, Sendable {
    /// System messages provide context and instructions to the LLM
    case system

    /// User messages represent input from the human participant
    case user

    /// Assistant messages contain responses generated by the LLM
    case assistant

    /// Tool messages contain results from tool/function executions
    case tool
}

/// Comprehensive error handling for LLM operations.
///
/// This enum provides detailed error classification for all possible failure
/// modes when interacting with Large Language Model APIs. It conforms to
/// standard Swift error protocols for proper error handling and localization.
///
/// - Important: Always handle these errors appropriately in production code.
///              Some errors may require user intervention (e.g., authentication).
///
/// - Note: Errors are categorized by their likely cause and recovery strategy.
///
/// - SeeAlso: ``LLMClient``, ``ResponseRequest``
public enum LLMError: Error, LocalizedError, Equatable, Sendable {
    /// The provided base URL is malformed or invalid
    ///
    /// - Note: This error occurs during client initialization when the URL
    ///         cannot be parsed or is not a valid HTTP/HTTPS URL.
    case invalidURL

    /// Failed to encode the request data for transmission
    ///
    /// - Parameter message: Detailed description of the encoding failure
    /// - Note: This typically indicates a problem with JSON serialization
    ///         or invalid data types in the request.
    case encodingFailed(String)

    /// Network operation failed during API communication
    ///
    /// - Parameter message: Detailed description of the network failure
    /// - Note: This includes connectivity issues, DNS resolution failures,
    ///         and other network-related problems.
    case networkError(String)

    /// Failed to decode the response data from the API
    ///
    /// - Parameter message: Detailed description of the decoding failure
    /// - Note: This typically indicates a mismatch between the expected
    ///         response format and the actual API response.
    case decodingFailed(String)

    /// Server returned an error status code
    ///
    /// - Parameters:
    ///   - statusCode: HTTP status code returned by the server
    ///   - message: Optional error message from the server
    /// - Note: This includes 4xx and 5xx HTTP status codes indicating
    ///         client or server errors respectively.
    case serverError(statusCode: Int, message: String?)

    /// API rate limit has been exceeded
    ///
    /// - Note: This error occurs when too many requests are made within
    ///         the allowed time window. Implement exponential backoff
    ///         and retry logic for handling this error.
    case rateLimit

    /// Received a response that doesn't match expected format
    ///
    /// - Note: This indicates the API returned data that doesn't conform
    ///         to the expected response structure or contains invalid data.
    case invalidResponse

    /// A provided value is invalid or out of acceptable range
    ///
    /// - Parameter message: Detailed description of what value is invalid
    /// - Note: This is commonly used for parameter validation, such as
    ///         temperature values outside the 0.0...2.0 range.
    case invalidValue(String)

    /// A required field or parameter is missing
    ///
    /// - Note: This occurs when mandatory fields are not provided in
    ///         request construction or API responses.
    case missingRequiredField

    /// Base URL is required but was not provided during client initialization
    ///
    /// - Note: The LLMClient requires a valid base URL to function properly.
    case missingBaseURL

    /// Model identifier is required but was not provided in the request
    ///
    /// - Note: Each API request must specify which LLM model to use.
    case missingModel

    /// Authentication credentials are invalid or expired
    ///
    /// - Note: Check your API key and ensure it has the necessary permissions.
    case authenticationFailed

    /// Request timed out before completion
    ///
    /// - Note: Network requests that exceed the configured timeout duration
    ///         will result in this error.
    case timeout

    /// SSL/TLS certificate validation or handshake failed
    ///
    /// - Parameter message: Detailed description of the SSL/TLS error
    /// - Note: This indicates problems with secure connection establishment.
    case sslError(String)

    /// General HTTP error with status code
    ///
    /// - Parameters:
    ///   - statusCode: HTTP status code returned
    ///   - message: Optional error message from the response
    /// - Note: This is a catch-all for HTTP-related errors not covered
    ///         by more specific error cases.
    case httpError(statusCode: Int, message: String?)

    /// Failed to parse JSON data
    ///
    /// - Parameter message: Detailed description of the JSON parsing failure
    /// - Note: This indicates malformed JSON data or unexpected structure.
    case jsonParsingError(String)

    /// A parameter has an invalid value or format
    ///
    /// - Parameters:
    ///   - parameter: Name of the invalid parameter
    ///   - reason: Explanation of why the parameter is invalid
    /// - Note: This provides specific parameter-level validation errors.
    case invalidParameter(String, String)

    public var errorDescription: String? {
        switch self {
        case .invalidURL:
            return "The provided URL is invalid"
        case .encodingFailed(let msg):
            return "Failed to encode data: \(msg)"
        case .networkError(let msg):
            return "Network operation failed: \(msg)"
        case .decodingFailed(let msg):
            return "Failed to decode data: \(msg)"
        case .serverError(let code, let msg):
            return "Server error (\(code)): \(msg ?? "Unknown error")"
        case .rateLimit:
            return "Rate limit exceeded"
        case .invalidResponse:
            return "Received invalid response"
        case .invalidValue(let msg):
            return "Invalid value: \(msg)"
        case .missingRequiredField:
            return "Required field is missing"
        case .missingBaseURL:
            return "Base URL is required but not provided"
        case .missingModel:
            return "Model is required but not provided"
        case .authenticationFailed:
            return "Authentication failed"
        case .timeout:
            return "Request timed out"
        case .sslError(let msg):
            return "SSL/TLS error: \(msg)"
        case .httpError(let code, let msg):
            return "HTTP error (\(code)): \(msg ?? "Unknown error")"
        case .jsonParsingError(let msg):
            return "JSON parsing error: \(msg)"
        case .invalidParameter(let param, let reason):
            return "Invalid parameter '\(param)': \(reason)"
        }
    }

    public var recoverySuggestion: String? {
        switch self {
        case .rateLimit:
            return "Please wait before retrying the request"
        case .timeout:
            return "Check network connectivity and try again"
        case .networkError:
            return "Verify network settings and try again"
        default:
            return nil
        }
    }
}

// MARK: - Protocols

/// A protocol defining messages that can be sent to and received from LLMs.
///
/// Types conforming to this protocol represent individual messages in a conversation,
/// supporting multimodal content including text, images, and files.
///
/// - Note: This protocol is the foundation for all message types in SwiftResponsesDSL.
///         It ensures consistent encoding and type safety across different message formats.
///
/// - SeeAlso: ``Role``, ``ContentPart``, ``SystemMessage``, ``UserMessage``, ``AssistantMessage``
public protocol ResponseMessage: Encodable, Sendable {
    /// The role of the message sender in the conversation
    ///
    /// - SeeAlso: ``Role``
    var role: Role { get }

    /// The multimodal content of the message
    ///
    /// - Note: Content can include text, images, and other media types
    ///         represented as an array of content parts.
    ///
    /// - SeeAlso: ``ContentPart``
    var content: [ContentPart] { get }
}

/// A protocol for configuration parameters that modify LLM behavior.
///
/// Types conforming to this protocol represent individual settings that can be
/// applied to LLM requests, such as temperature, token limits, and other model parameters.
///
/// - Note: This protocol enables type-safe configuration of LLM requests through
///         the DSL's parameter system. Each conforming type represents a specific
///         configuration option with built-in validation.
///
/// - Important: Implementations should validate their values and throw appropriate
///              errors for invalid inputs.
///
/// - SeeAlso: ``ResponseRequest``, ``Temperature``, ``MaxOutputTokens``
public protocol ResponseConfigParameter: Sendable {
    func apply(to request: inout ResponseRequest) throws
}

// MARK: - Type-Erased Codable

/// A type-erased container for arbitrary JSON data.
///
/// `AnyCodable` provides a flexible way to encode and decode JSON data of any type,
/// supporting all standard JSON value types. This is particularly useful for handling
/// dynamic or unpredictable JSON structures, such as metadata fields or API responses
/// with varying schemas.
///
/// - Note: This enum is commonly used for handling JSON fields that may contain
///         different types depending on the API response or request context.
///
/// - Important: While flexible, prefer strongly-typed structures when possible
///              for better type safety and performance.
///
/// - SeeAlso: `Codable`, `JSONEncoder`, `JSONDecoder`
public enum AnyCodable: Codable, Sendable {
    /// Represents a JSON null value
    case null

    /// Represents a JSON boolean value
    ///
    /// - Parameter value: The boolean value to store
    case bool(Bool)

    /// Represents a JSON number as an integer
    ///
    /// - Parameter value: The integer value to store
    /// - Note: JSON numbers are decoded as integers when they have no decimal component
    case int(Int)

    /// Represents a JSON number as a double-precision floating point
    ///
    /// - Parameter value: The double value to store
    /// - Note: JSON numbers with decimal components are decoded as doubles
    case double(Double)

    /// Represents a JSON string value
    ///
    /// - Parameter value: The string value to store
    case string(String)

    /// Represents a JSON array of values
    ///
    /// - Parameter value: The array of `AnyCodable` values to store
    case array([AnyCodable])

    /// Represents a JSON object/dictionary
    ///
    /// - Parameter value: The dictionary mapping string keys to `AnyCodable` values
    case dictionary([String: AnyCodable])

    public func encode(to encoder: Encoder) throws {
        var container = encoder.singleValueContainer()
        switch self {
        case .null:
            try container.encodeNil()
        case .bool(let value):
            try container.encode(value)
        case .int(let value):
            try container.encode(value)
        case .double(let value):
            try container.encode(value)
        case .string(let value):
            try container.encode(value)
        case .array(let value):
            try container.encode(value)
        case .dictionary(let value):
            try container.encode(value)
        }
    }

    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        if container.decodeNil() {
            self = .null
        } else if let value = try? container.decode(Bool.self) {
            self = .bool(value)
        } else if let value = try? container.decode(Int.self) {
            self = .int(value)
        } else if let value = try? container.decode(Double.self) {
            self = .double(value)
        } else if let value = try? container.decode(String.self) {
            self = .string(value)
        } else if let value = try? container.decode([AnyCodable].self) {
            self = .array(value)
        } else if let value = try? container.decode([String: AnyCodable].self) {
            self = .dictionary(value)
        } else {
            throw DecodingError.dataCorruptedError(in: container, debugDescription: "AnyCodable value cannot be decoded")
        }
    }

    // Convenience accessors
    public var intValue: Int? {
        if case .int(let value) = self { return value }
        return nil
    }

    public var stringValue: String? {
        if case .string(let value) = self { return value }
        return nil
    }

    public var boolValue: Bool? {
        if case .bool(let value) = self { return value }
        return nil
    }

    public var doubleValue: Double? {
        if case .double(let value) = self { return value }
        return nil
    }

    // Static constructor for converting from Any
    public static func fromAny(_ value: Any) -> AnyCodable? {
        switch value {
        case let v as Bool:
            return .bool(v)
        case let v as Int:
            return .int(v)
        case let v as Double:
            return .double(v)
        case let v as String:
            return .string(v)
        case let v as [Any]:
            let array = v.compactMap { fromAny($0) }
            return .array(array)
        case let v as [String: Any]:
            let dict = v.compactMapValues { fromAny($0) }
            return .dictionary(dict)
        case _ as NSNull:
            return .null
        default:
            return nil
        }
    }
}
