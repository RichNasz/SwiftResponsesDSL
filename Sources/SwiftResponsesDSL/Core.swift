//
//  Core.swift
//  SwiftResponsesDSL
//
//  Core types and protocols for the SwiftResponsesDSL
//
//  Generated by AI-assisted code generation.
//  Created by Richard Naszcyniec on [Date].
//  Copyright Â© [Year] Richard Naszcyniec. All rights reserved.
//

import Foundation

// MARK: - Core Enums

/// Defines message roles in the conversation
public enum Role: String, Codable, Sendable {
    case system
    case user
    case assistant
    case tool
}

/// Comprehensive error handling for LLM operations
public enum LLMError: Error, LocalizedError, Equatable, Sendable {
    case invalidURL
    case encodingFailed(String)
    case networkError(String)
    case decodingFailed(String)
    case serverError(statusCode: Int, message: String?)
    case rateLimit
    case invalidResponse
    case invalidValue(String)
    case missingRequiredField
    case missingBaseURL
    case missingModel
    case authenticationFailed
    case timeout
    case sslError(String)
    case httpError(statusCode: Int, message: String?)
    case jsonParsingError(String)
    case invalidParameter(String, String)

    public var errorDescription: String? {
        switch self {
        case .invalidURL:
            return "The provided URL is invalid"
        case .encodingFailed(let msg):
            return "Failed to encode data: \(msg)"
        case .networkError(let msg):
            return "Network operation failed: \(msg)"
        case .decodingFailed(let msg):
            return "Failed to decode data: \(msg)"
        case .serverError(let code, let msg):
            return "Server error (\(code)): \(msg ?? "Unknown error")"
        case .rateLimit:
            return "Rate limit exceeded"
        case .invalidResponse:
            return "Received invalid response"
        case .invalidValue(let msg):
            return "Invalid value: \(msg)"
        case .missingRequiredField:
            return "Required field is missing"
        case .missingBaseURL:
            return "Base URL is required but not provided"
        case .missingModel:
            return "Model is required but not provided"
        case .authenticationFailed:
            return "Authentication failed"
        case .timeout:
            return "Request timed out"
        case .sslError(let msg):
            return "SSL/TLS error: \(msg)"
        case .httpError(let code, let msg):
            return "HTTP error (\(code)): \(msg ?? "Unknown error")"
        case .jsonParsingError(let msg):
            return "JSON parsing error: \(msg)"
        case .invalidParameter(let param, let reason):
            return "Invalid parameter '\(param)': \(reason)"
        }
    }

    public var recoverySuggestion: String? {
        switch self {
        case .rateLimit:
            return "Please wait before retrying the request"
        case .timeout:
            return "Check network connectivity and try again"
        case .networkError:
            return "Verify network settings and try again"
        default:
            return nil
        }
    }
}

// MARK: - Protocols

/// Defines messages with a role and multimodal content
public protocol ResponseMessage: Encodable, Sendable {
    var role: Role { get }
    var content: [ContentPart] { get }
}

/// Marker protocol for configuration parameter structs
public protocol ResponseConfigParameter: Sendable {
    func apply(to request: inout ResponseRequest) throws
}

// MARK: - Type-Erased Codable

/// Type-erased Codable for flexible JSON fields (e.g., metadata, error)
public enum AnyCodable: Codable, Sendable {
    case null
    case bool(Bool)
    case int(Int)
    case double(Double)
    case string(String)
    case array([AnyCodable])
    case dictionary([String: AnyCodable])

    public func encode(to encoder: Encoder) throws {
        var container = encoder.singleValueContainer()
        switch self {
        case .null:
            try container.encodeNil()
        case .bool(let value):
            try container.encode(value)
        case .int(let value):
            try container.encode(value)
        case .double(let value):
            try container.encode(value)
        case .string(let value):
            try container.encode(value)
        case .array(let value):
            try container.encode(value)
        case .dictionary(let value):
            try container.encode(value)
        }
    }

    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        if container.decodeNil() {
            self = .null
        } else if let value = try? container.decode(Bool.self) {
            self = .bool(value)
        } else if let value = try? container.decode(Int.self) {
            self = .int(value)
        } else if let value = try? container.decode(Double.self) {
            self = .double(value)
        } else if let value = try? container.decode(String.self) {
            self = .string(value)
        } else if let value = try? container.decode([AnyCodable].self) {
            self = .array(value)
        } else if let value = try? container.decode([String: AnyCodable].self) {
            self = .dictionary(value)
        } else {
            throw DecodingError.dataCorruptedError(in: container, debugDescription: "AnyCodable value cannot be decoded")
        }
    }

    // Convenience accessors
    public var intValue: Int? {
        if case .int(let value) = self { return value }
        return nil
    }

    public var stringValue: String? {
        if case .string(let value) = self { return value }
        return nil
    }

    public var boolValue: Bool? {
        if case .bool(let value) = self { return value }
        return nil
    }

    public var doubleValue: Double? {
        if case .double(let value) = self { return value }
        return nil
    }

    // Static constructor for converting from Any
    public static func fromAny(_ value: Any) -> AnyCodable? {
        switch value {
        case let v as Bool:
            return .bool(v)
        case let v as Int:
            return .int(v)
        case let v as Double:
            return .double(v)
        case let v as String:
            return .string(v)
        case let v as [Any]:
            let array = v.compactMap { fromAny($0) }
            return .array(array)
        case let v as [String: Any]:
            let dict = v.compactMapValues { fromAny($0) }
            return .dictionary(dict)
        case _ as NSNull:
            return .null
        default:
            return nil
        }
    }
}
