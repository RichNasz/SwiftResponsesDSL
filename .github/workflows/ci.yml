name: CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    name: Test
    runs-on: macos-latest

    strategy:
      matrix:
        swift-version: ["6.2"]

    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Set up Swift
      uses: swift-actions/setup-swift@v2
      with:
        swift-version: ${{ matrix.swift-version }}

    - name: Cache Swift dependencies
      uses: actions/cache@v4
      with:
        path: |
          .build
          ~/Library/Caches/org.swift.swiftpm
        key: ${{ runner.os }}-swift-${{ matrix.swift-version }}-${{ hashFiles('Package.swift') }}
        restore-keys: |
          ${{ runner.os }}-swift-${{ matrix.swift-version }}-
          ${{ runner.os }}-swift-

    - name: Build
      run: swift build --configuration release

    - name: Run tests
      run: swift test --configuration release

  lint:
    name: Lint
    runs-on: ubuntu-latest

    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Set up Swift
      uses: swift-actions/setup-swift@v2
      with:
        swift-version: "6.2"

    - name: Lint with SwiftFormat
      run: |
        if command -v swiftformat >/dev/null 2>&1; then
          swiftformat --lint --verbose .
        else
          echo "SwiftFormat not available, skipping lint check"
        fi

  validate-package:
    name: Validate Package
    runs-on: macos-latest

    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Set up Swift
      uses: swift-actions/setup-swift@v2
      with:
        swift-version: "6.2"

    - name: Validate package
      run: swift package validate

    - name: Generate documentation
      run: |
        # Try to generate documentation if available
        if swift package --help | grep -q generate-documentation; then
          swift package generate-documentation --target SwiftResponsesDSL --output-path docs
        else
          echo "Documentation generation not available in this Swift version"
        fi
